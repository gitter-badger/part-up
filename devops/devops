#!/usr/bin/env node

var program = require('commander');
var spawn = require('child_process').spawn;

var run = function(executable, arguments) {
    if (executable === 'ansible-playbook' && program.tags) {
        arguments.push('-t', program.tags);
    }

    if (program.verbose) {
        arguments.push('-vvvv');
    }

    if (program.extraVars) {
        arguments.push('-e', program.extraVars);
    }

    var ansible = spawn(executable, arguments, {stdio: 'inherit'});

    ansible.on('close', function(status) {
        process.exit(status);
    });
};

program
    .option('-v, --verbose', 'make output more verbose')
    .option('-e, --extra-vars [extra-vars]', 'set extra ansible variables as key=value')
    .option('-t, --tags [tags]', 'set tags that are used by the ansible-playbook');

program
    .command('provision <inventory> <hosts>')
    .action(function(inventory, destination) {
        var arguments = [];

        arguments.push('-i', 'inventories/' + inventory.toLowerCase() + '.yml');

        var playbook = 'application';

        if (inventory === 'loadbalancer') playbook = 'loadbalancer';
        if (inventory === 'ci') playbook = 'ci';

        arguments.push('provision/' + playbook + '.yml');

        arguments.push('--limit=' + destination.toLowerCase());

        if (inventory !== 'vagrant') {
            arguments.push('--vault-password-file=~/.ssh/partup-server');
            arguments.push('--private-key=~/.ssh/partup-server');
            arguments.push('--user=root');
        }

        run('ansible-playbook', arguments);
    });

program
    .command('run <inventory> <hosts> <command>')
    .action(function(inventory, destination, command) {
        var arguments = [];

        arguments.push(destination.toLowerCase());
        arguments.push('-i', 'inventories/' + inventory.toLowerCase() + '.yml');
        arguments.push('-a', command.toLowerCase());

        if (inventory !== 'vagrant') {
            arguments.push('--vault-password-file=~/.ssh/partup-server');
            arguments.push('--private-key=~/.ssh/partup-server');
            arguments.push('--user=root');
        }

        run('ansible', arguments);
    });

program
    .command('command <command> <inventory> <hosts>')
    .action(function(command, inventory, destination) {
        var arguments = [];

        arguments.push('-i', 'inventories/' + inventory.toLowerCase() + '.yml');
        arguments.push('commands/' + command.toLowerCase() + '.yml');
        arguments.push('--limit=' + destination.toLowerCase());

        if (inventory !== 'vagrant') {
            arguments.push('--vault-password-file=~/.ssh/partup-server');
            arguments.push('--private-key=~/.ssh/partup-server');
            arguments.push('--user=deploy');
        }

        run('ansible-playbook', arguments);
    });

program
    .command('edit <file>')
    .action(function(file) {
        var arguments = [];

        arguments.push('edit');
        arguments.push(file);
        arguments.push('--vault-password-file=~/.ssh/partup-server');

        run('ansible-vault', arguments);
    });

program
    .command('view <file>')
    .action(function(file) {
        var arguments = [];

        arguments.push('view');
        arguments.push(file);
        arguments.push('--vault-password-file=~/.ssh/partup-server');

        run('ansible-vault', arguments);
    });

program
    .command('encrypt <files...>')
    .action(function(files) {
        files.forEach(function(file) {
            var arguments = [];

            arguments.push('encrypt');
            arguments.push(file);
            arguments.push('--vault-password-file=~/.ssh/partup-server');

            run('ansible-vault', arguments);
        });
    });

program
    .command('decrypt <files...>')
    .action(function(files) {
        files.forEach(function(file) {
            var arguments = [];

            arguments.push('decrypt');
            arguments.push(file);
            arguments.push('--vault-password-file=~/.ssh/partup-server');

            run('ansible-vault', arguments);
        });
    });

program.parse(process.argv);

if (process.argv.length < 3) program.help();
